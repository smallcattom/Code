"F2： 自动填充头文件
"F3：设置c/c++格式对齐
"F4：添加折叠属性
"F6：全选
"F7：添加行注释
"F8：撤销行注释
"F9：编译和运行
" ============================================================================
" 基本设定
" ============================================================================
" 关闭 vi 兼容模式，否则无法使用 vim 的大部分扩展功能
set nocompatible
" 打开文件时总是跳到最后光标所在的行
autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

" 为键码打开超时, 避免终端下 <ESC> 的等待
set ttimeout
" 等待键码超时时间
set ttimeoutlen=50
" 搜索时忽略大小写
set ignorecase
" 如果搜索模式包含大写字符，不使用 'ignorecase' 选项
set smartcase
" visual模式修改缩进时不退出该模式
vnoremap < <gv
vnoremap > >gv 
" 让退格键以现代化的方式工作
set backspace=2
" 在 vim 窗口右下角，标尺的右边显示未完成的命令
"set showcmd
" 增强的命令行补全
set wildmenu
" 左下角显示当前模式
set showmode
" 打开文件类型的检测
filetype on
" 可以为特定的文件类型允许插件文件的载入
filetype plugin on
" 可以为特定的文件类型载入缩进文件
filetype indent on
" 搜索时忽略大小写
set ignorecase
" 如果搜索模式包含大写字符，不使用 'ignorecase' 选项
set smartcase
" 设置搜索结果高亮显示
"set hlsearch
" 在搜索模式时输入时即时显示相应的匹配点
set incsearch
" 启动对鼠标的支持
"set mouse=a
" 让 vim 支持鼠标拖动窗口边缘, 以方便改变窗口大小
set ttymouse=xterm2
" 设定文件编码类型，彻底解决中文编码问题
let &termencoding=&encoding
" 鼠标右键弹出菜单
"set mousemodel=popup
" 允许光标移动到刚刚超过行尾字符之后的位置, 允许可视列块模式的虚拟编辑
set virtualedit=onemore,block
" 定制状态栏, 显示有价值的信息
set statusline=%<%f\ %h%w%m%r%y[%{&ff}]%([%{&fenc}]%)%=%(%l/%L,%c%V%)\ %P
" 一直显示状态栏
set laststatus=2
syntax on
set ruler
"set cursorline
set number
set shiftwidth=4
"set makeprg=CompileRunCpp()
language messages zh_CN.utf-8   
" 常规模式下用空格键来开关光标行所在折叠（注：zR 展开所有折叠，zM
" 关闭所有折叠）  
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR> 
" 补全菜单的弹出方式, 常用的方式
set completeopt=longest,menu,menuone    
set fileencodings=utf-8 ",gb18030,ucs-bom,gbk,gb2312,cp936   
set encoding=utf-8
"修改vimrc立即生效
autocmd! bufwritepost ~/.vimrc source %
"set expandtab
map <F9> :call CompileRunCpp()<CR>
map <F6> <esc>ggVG " +y 
map <F3> <esc>gg=G " format C/C++
map <F12> :xa<cr>
func! CompileRunCpp()
se"w"
if &filetype == 'c'
exec "!gcc % -o %< -lpthread `pkg-config --libs opencv --cflags opencv`"
exec "!time ./%<"
elseif &filetype == 'cpp'
exec "!g++ % -o %< -lpthread `pkg-config --libs opencv --cflags opencv pkg-config --cflags --libs gtk+-2.0`" 
exec "!time ./%<"    
elseif &filetype == 'java' 
exec "!javac %" 
exec "!time java %<"
elseif &filetype == 'sh'
exec "!/bin/bash %"
elseif &filetype == 'python'|| &filetype == 'py'
exec "!time python %"
elseif &filetype == 'html'
exec "!google-chrome %&"
elseif &filetype == 'go'
exec "!time go run %"
endif
endfunc

map<F8> :call Cancelnote()<CR>
func! Cancelnote()
if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
exec "s/\\/\\///g"
elseif &filetype == 'python'|| &filetype == 'sh' 
exec "s/#//g"
elseif &filetype == 'vim'
	exec "s/\"//g"
endif
endfunc
map<F7> :call AddNote()<CR>
func! AddNote()
if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
exec "s/^/\\/\\//g"
elseif &filetype == 'python'|| &filetype == 'sh' 
exec "s/^/#/g "
elseif &filetype == 'vim'
	exec "s/^/\"/g"
endif
endfunc
map<C-e> :! /bin/bash<CR>
" 补全菜单的弹出方式, 常用的方式
set completeopt=menuone
" 使新行缩进与前一行一样
set autoindent
set autoread
set cindent  
set tabstop=4
set smartindent
set showmatch
set nobackup
set noswapfile
set autowrite
"自动写入
set autowriteall
colorscheme  fruity "koehler elflord default darkblue ron evening freya
inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>

"autocmd BufNewFile,BufRead *.xml source ~/.vim/ftplugin/xml.vim
autocmd FileType cpp,c,java  inoremap { {<CR>}<ESC>O
autocmd FileType sh  inoremap { {}<ESC>i

"inoremap { {<CR>}<ESC>O
inoremap } <c-r>=ClosePair('}')<CR>

:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>

function! ClosePair(char)
if getline('.')[col('.')-1] == a:char
return "\<Right>"
else
return a:char
endif
endfunction

"配对删除括号
" 按退格键时判断当前光标前一个字符，如果是左括号，则删除对应的右括号以及括号中间的内容
function! RemovePairs()
	let l:line = getline(".")
	let l:previous_char = l:line[col(".")-1] " 取得当前光标前一个字符
 
	if index(["(", "[", "{"], l:previous_char) != -1
		let l:original_pos = getpos(".")
		execute "normal %"
		let l:new_pos = getpos(".")
 
		" 如果没有匹配的右括号
		if l:original_pos == l:new_pos
			execute "normal! a\<BS>"
			return
		end
 
		let l:line2 = getline(".")
		if len(l:line2) == col(".")
			" 如果右括号是当前行最后一个字符
			execute "normal! v%xa"
		else
			" 如果右括号不是当前行最后一个字符
			execute "normal! v%xi"
		end
 
	else
		execute "normal! a\<BS>"
	end
endfunction
" 用退格键删除一个左括号时同时删除对应的右括号
inoremap <BS> <ESC>:call RemovePairs()<CR>a
" 输入一个字符时，如果下一个字符也是括号，则删除它，避免出现重复字符
function! RemoveNextDoubleChar(char)
let l:line = getline(".")
let l:next_char = l:line[col(".")] " 取得当前光标后一个字符

if a:char == l:next_char
execute "normal! l"
else
execute "normal! a" . a:char . ""
end
endfunction
inoremap ) <ESC>:call RemoveNextDoubleChar(')')<CR>a
inoremap ] <ESC>:call RemoveNextDoubleChar(']')<CR>a
inoremap } <ESC>:call RemoveNextDoubleChar('}')<CR>a

map<F2> :call Settitle()<CR>o
func! Settitle()
if &filetype == 'c'
let l = 0
let l = l + 1 | call setline(l,'#include <sys/types.h>')
let l = l + 1 | call setline(l,'#include <sys/stat.h>')
let l = l + 1 | call setline(l,'#include <sys/socket.h>')
let l = l + 1 | call setline(l,'#include <unistd.h>')
let l = l + 1 | call setline(l,'#include <stdio.h>')
let l = l + 1 | call setline(l,'#include <stdarg.h>')
let l = l + 1 | call setline(l,'#include <string.h>')
let l = l + 1 | call setline(l,'#include <fcntl.h>')
let l = l + 1 | call setline(l,'#include <math.h>')
let l = l + 1 | call setline(l,'#include <stdlib.h>')
let l = l + 1 | call setline(l,'#include <netinet/in.h>')
let l = l + 1 | call setline(l,'#include <arpa/inet.h>')
let l = l + 1 | call setline(l,'#define  MAXLINE 1000')
let l = l + 1 | call setline(l,'#define  SA struct sockaddr')
let l = l + 1 | call setline(l,'')
let l = l + 1 | call setline(l,'int main()')
let l = l + 1 | call setline(l,'{')
let l = l + 1 | call setline(l,'    ')
let l = l + 1 | call setline(l,'    return 0;')
let l = l + 1 | call setline(l,'}')
elseif &filetype == 'sh'
let l = 0
let l = l + 1 | call setline(l,'#!/bin/bash')
elseif &filetype == 'cpp'
let l = 0
let l = l + 1 | call setline(l,'#include <iostream>')
let l = l + 1 | call setline(l,'#include <numeric>')
let l = l + 1 | call setline(l,'#include <cstdio>')
let l = l + 1 | call setline(l,'#include <cstdlib>')
let l = l + 1 | call setline(l,'#include <cstring>')
let l = l + 1 | call setline(l,'#include <vector>')
let l = l + 1 | call setline(l,'#include <cmath>')
let l = l + 1 | call setline(l,'#include <algorithm>')
let l = l + 1 | call setline(l,'#define INF 0x3f3f3f3f')
let l = l + 1 | call setline(l,'#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();e++)')
let l = l + 1 | call setline(l,'typedef long long ll;')
let l = l + 1 | call setline(l,'using namespace std;')
let l = l + 1 | call setline(l,'const int N = 100100;')
let l = l + 1 | call setline(l,'int main()')
let l = l + 1 | call setline(l,'{')
let l = l + 1 | call setline(l,'    freopen("in.txt","r",stdin);')
let l = l + 1 | call setline(l,'    ')
let l = l + 1 | call setline(l,'    return 0;')
let l = l + 1 | call setline(l,'}')
endif
endfunc

"go语言缩进对齐
" just indent common cases to avoid manually typing tab or backspace
"
" for better style, please use gofmt after done editing.
"
" since it just simply uses regex matches,
" there might be some mis-indented corner cases.
" 

" Only load this indent file when no other was loaded.
filetype plugin indent on
if exists("b:did_indent")
finish
endif
let b:did_indent = 1

setlocal indentexpr=GetGoIndent()

" To make Vim call GetLuaIndent() when it finds '\s*)', '\s*}', '\s*case', '\s*default'
setlocal indentkeys+=0=),0=},0=case,0=default

setlocal autoindent

" Only define the function once.
if exists("*GetGoIndent")
finish
endif

function! GetGoIndent()
" Find a non-blank line above the current line.
let prevlnum = prevnonblank(v:lnum - 1)

" Hit the start of the file, use zero indent.
if prevlnum == 0
return 0
endif

" Add a 'shiftwidth' after lines that start a block:
" 'case', 'default', '{', '('
let ind = indent(prevlnum)
let prevline = getline(prevlnum)
let midx = match(prevline, '^\s*\%(case\>\|default\>\)')
if midx == -1
let midx = match(prevline, '[({]\s*$')
endif
if midx != -1
let ind = ind + &shiftwidth
endif

" Subtract a 'shiftwidth' on 'case', 'default', '}', ')'.
" This is the part that requires 'indentkeys'.
let midx = match(getline(v:lnum), '^\s*\%(case\>\|default\>\|[)}]\)')
if midx != -1
let ind = ind - &shiftwidth
endif

return ind
endfunction

run ./.vim/nerdtree/nerdtree_plugin/exec_menuitem.vim
run ./.vim/nerdtree/nerdtree_plugin/fs_menu.vim
run ./.vim/nerdtree/plugin/NERD_tree.vim

